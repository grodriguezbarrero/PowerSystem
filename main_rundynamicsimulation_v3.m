% function main_rundynamicsimulation_v3

% This version aims to provide fewer graphs but more quickly.

% -------------------------------------------------------------------------
% Predefined values
% -------------------------------------------------------------------------
% close all;
tic

powersystemdl = 'Powersystem.slx';

load_system('Powersystem');

str_uftype = 'uf';
str_rocoftype = 'rocof';

fbase = 50;
tsimulation = 35;
t0 = 5;

v_essemptydefault = [1000, 80]; % if no ess, use these values for a1, a2, dfracemax

% initialise WG model
%     vw_ini        = 10;
% t_wind_change = 20;
%     vw_after      = 8;
%     [pinitwindgen,wr0, ~, ~, ~, ~, ~, ~, ~, ~, ~,~,~] = fun_WGmodel_startup_v3(vw_ini);

numWG         = 9;

% -------------------------------------------------------------------------
% Read input data
% -------------------------------------------------------------------------

disp('Reading data...');

xlsfilename = 'LaPalmaInputData_noESS_withoutFCUC.xls';

[status, c_sheets] = xlsfinfo(xlsfilename);

% read generator dynamic model data
m_gendata      = xlsread(xlsfilename,c_sheets{1});

 % read generation scenarios
m_genscenarios = xlsread(xlsfilename,c_sheets{3});
m_genscenarios = m_genscenarios(2:end,2:end);      % delete first row and column

v_pwg          = m_genscenarios(:, size(m_genscenarios,2)); % vector storing power generated by WGs in each scenario
m_genscenarios = m_genscenarios(1:end,1:end-1);      % delete last column

% correct max and min generation output
ngen = size(m_gendata,2)-1; % the '-1' is there to ignore the WG column
for igen = 1:ngen
    v_idxcommitted = find(m_genscenarios(:,igen)>0);
    m_gendata(6,igen) = min([m_genscenarios(v_idxcommitted,igen);m_gendata(6,igen)]); % pmax
    m_gendata(5,igen) = max([m_genscenarios(v_idxcommitted,igen);m_gendata(5,igen)]); % pmin
end

% Read Nominal Power of WG
Pn = m_gendata(4,ngen+1);

% read ufls parameters
[m_uflsparam,c_uflsID] = xlsread(xlsfilename,c_sheets{4}); 
[m_ufparam , m_rocofparam, v_pshed0] = ...
    fun_prepareuflsformat4simulinkformat(m_uflsparam, c_uflsID, str_uftype, str_rocoftype);

v_dfufpu = (m_ufparam(:,1)-fbase)/fbase;
v_tintuf = m_ufparam(:,3);
v_topnuf = m_ufparam(:,4);

v_dfrocofpu = (m_rocofparam(:,1)-fbase)/fbase;
v_dfdtrocofpu = m_rocofparam(:,2)/fbase;
v_tintrocof = m_rocofparam(:,3);
v_topnrocof = m_rocofparam(:,4);

% read UC data
m_essdata = xlsread(xlsfilename,c_sheets{2});
if isempty(m_essdata)
    m_essdata = zeros(12,1);
    m_essdata([6, 11],1) = v_essemptydefault(1);
    m_essdata(8,1) = v_essemptydefault(2);
end
ness = length(m_essdata(1,:));

% -------------------------------------------------------------------------
% Simulate all possible single generating unit outages
% -------------------------------------------------------------------------

disp('Simulation start...');

nscenarios      = 1;
m_genscenarios  = m_genscenarios(1:nscenarios,:); % REMOVE THIS TO GET ALL SCENARIOS
v_pwg           = v_pwg(1:nscenarios);

% preallocate output cells
nsimulations = length(nonzeros(m_genscenarios));
%     c_t                 = cell(nsimulations,1);
%     c_w                 = cell(nsimulations,1);
%     c_pgentot           = cell(nsimulations,1);
%     c_pufls             = cell(nsimulations,1);
%     c_pgenWGtot         = cell(nsimulations,1);
isim = nsimulations;

% preallocate output cells, but for the simulations where different WGs are
% connected
nsimulations_wg = 4 * nsimulations; % four WG combinations for every generator shut off
%     c_t_wg              = cell(nsimulations_wg,1);
%     c_w_wg              = cell(nsimulations_wg,1);
%     c_pgentot_wg        = cell(nsimulations_wg,1);
%     c_pufls_wg          = cell(nsimulations_wg,1);
%     c_pgenWGtot_wg      = cell(nsimulations_wg,1);
%     c_WGpenetration_wg  = cell(nsimulations_wg,1);

delta_vw        = [0, 0.5, 1];
t_delta_vw      = [t0-2, t0, t0+2];

nWGgroupsonline = 3; % 3, 6 or 9 WGs
ndelta_vw       = length(delta_vw); % 0, 0.5, 1 or 2 m/s
nt_delta_vw     = length(t_delta_vw); % 2s before, 0s, 2s after disconnection
ngenonline      = 8;


c_t_wg              = cell(nscenarios, ngenonline, nWGgroupsonline, ndelta_vw, nt_delta_vw);
c_w_wg              = cell(nscenarios, ngenonline, nWGgroupsonline, ndelta_vw, nt_delta_vw);
c_pgentot_wg        = cell(nscenarios, ngenonline, nWGgroupsonline, ndelta_vw, nt_delta_vw);
c_pufls_wg          = cell(nscenarios, ngenonline, nWGgroupsonline, ndelta_vw, nt_delta_vw);
c_pgenWGtot_wg      = cell(nscenarios, ngenonline, nWGgroupsonline, ndelta_vw, nt_delta_vw);
c_WGpenetration_wg  = cell(nscenarios, ngenonline, nWGgroupsonline, ndelta_vw, nt_delta_vw);

m_fmin  = zeros(nscenarios, ngenonline, nWGgroupsonline, ndelta_vw, nt_delta_vw);
m_fss   = zeros(nscenarios, ngenonline, nWGgroupsonline, ndelta_vw, nt_delta_vw);
m_pufls = zeros(nscenarios, ngenonline, nWGgroupsonline, ndelta_vw, nt_delta_vw);

isim_wg = nsimulations_wg;

ngenscenarios = size(m_genscenarios,1);

% set fix simulation block paramters
set_param([powersystemdl(1:end-4) '/UFLS'],'v_dfufpu',['[' sprintf('%f ',v_dfufpu) ']'],...
    'v_tintuf',['[' sprintf('%f ',v_tintuf) ']'],'v_topnuf',['[' sprintf('%f ',v_topnuf) ']'],... 
    'v_dfrocofpu',['[' sprintf('%f ',v_dfrocofpu) ']'],'v_dfdtrocofpu',['[' sprintf('%f ',v_dfdtrocofpu) ']'],...
    'v_tintrocof',['[' sprintf('%f ',v_tintrocof) ']'],'v_topnrocof',['[' sprintf('%f ',v_topnrocof) ']']); % set UFLS parameters 

set_param([powersystemdl(1:end-4) '/Perturbation'],'time',['[' sprintf('%f',t0) ']'],'Sampletime','0'); % set perturbation parameters 

set_param(powersystemdl(1:end-4),'StopTime',sprintf('%f',tsimulation));


%-----------------------new-code-------------------------

% simulate each scenario
for igenscenario = ngenscenarios:-1:1
    
    fprintf('Scenario: %i', igenscenario);
    
    pinitwindgen = v_pwg(igenscenario); % in MW

    % initialise the WGs for each scenario
    [vw0, wr0, pinitwindgen, ~, ~, ~, ~, ~, ~, ~, ~,~,~] = fun_WGmodel_startup_v3(pinitwindgen); % in pu

    for i = 0:numWG-1
        set_param([powersystemdl(1:end-4) '/WindGenerator' int2str(i)],'pinitwindgen',sprintf('%f',pinitwindgen),'wr0',sprintf('%f',wr0));
    end

    % initialise initial wind speed
    set_param([powersystemdl(1:end-4) '/Wind'], 'Before',['[' sprintf('%f',vw0) ']']);

    % get generation scenario
    v_genscenario = m_genscenarios(igenscenario,:); % generation of each unit in MW
    pdem_CG = sum(v_genscenario); % demand = sum of generation (in MW)
%         v_pshed0MW = v_pshed0/100*pdem;
    
    % get online units
    v_igenonline = find(v_genscenario>0); % a unit is online if its generation > 0 MW
    ngenonline = length(v_igenonline);

    % simulate every single generator outage
    for igenonline = 1:ngenonline
        
        % remaining units
        v_iremgenonline = v_igenonline;
        v_iremgenonline(igenonline) = []; % take out the lost generator
        ngen = length(v_iremgenonline);

        % set model parameters
        fun_setsimulinkblockparameters(powersystemdl(1:end-4),ngen,m_gendata,ness,m_essdata, ...
            v_genscenario,v_igenonline,igenonline,v_iremgenonline, Pn); %v_pshed0MW
        
        for WGgroupsonline = 1:3
            
            % base power to convert everything in pu on system basis
            v_Mbase = m_gendata(4,v_iremgenonline);
            Sbase = sum(v_Mbase);

            pdem = pdem_CG + WGgroupsonline*3*pinitwindgen*Pn;  % total demand in MW (Pn = 1.5 MW)
            v_pshed0MW = v_pshed0/100*pdem;                    

            v_pshed0pu = v_pshed0MW/Sbase;
            % set UFLS parameters (step size only)
            set_param([powersystemdl(1:end-4) '/UFLS'],'v_pshed0pu',['[' sprintf('%f ',v_pshed0pu) ']']);


            % set the right number of WGs
            set_param([powersystemdl(1:end-4) '/numWG'],'Value',['[' sprintf('%f',WGgroupsonline) ']']); % CHANGE
            
            
            i_delta_vw = 1;

            for delta_vw = [0, 0.5, 1]
                
                
                % initialise the change in wind speed
                set_param([powersystemdl(1:end-4) '/Wind'],'After',['[' sprintf('%f',vw0-delta_vw) ']']);
                
                i_t_delta_vw = 1;
                
                for t_delta_vw = [t0-2, t0, t0+2]
                    
                    % initialise the time of the wind speed change
                    set_param([powersystemdl(1:end-4) '/Wind'],'time',['[' sprintf('%f',t_delta_vw) ']']);
                    
                    % simulate it and store results
                    [c_t_wg{igenscenario, igenonline, WGgroupsonline, i_delta_vw, i_t_delta_vw},~, ...
                        c_w_wg{igenscenario, igenonline, WGgroupsonline, i_delta_vw, i_t_delta_vw}, ...
                        c_pgentot_wg{igenscenario, igenonline, WGgroupsonline, i_delta_vw, i_t_delta_vw}, ...
                        c_pufls_wg{igenscenario, igenonline, WGgroupsonline, i_delta_vw, i_t_delta_vw}, ...
                        c_pgenWGtot_wg{igenscenario, igenonline, WGgroupsonline, i_delta_vw, i_t_delta_vw}, ...
                        c_WGpenetration_wg{igenscenario, igenonline, WGgroupsonline, i_delta_vw, i_t_delta_vw}] = sim(powersystemdl);
                    
                    % change from pu units to MWs
                    c_pgentot_wg{igenscenario, igenonline, WGgroupsonline, i_delta_vw, i_t_delta_vw}    = ...
                        Sbase * c_pgentot_wg{igenscenario, igenonline, WGgroupsonline, i_delta_vw, i_t_delta_vw};
                    c_pufls_wg{igenscenario, igenonline, WGgroupsonline, i_delta_vw, i_t_delta_vw}      = ...
                        Sbase * c_pufls_wg{igenscenario, igenonline, WGgroupsonline, i_delta_vw, i_t_delta_vw};
                    c_pgenWGtot_wg{igenscenario, igenonline, WGgroupsonline, i_delta_vw, i_t_delta_vw}  = ...
                        Sbase * c_pgenWGtot_wg{igenscenario, igenonline, WGgroupsonline, i_delta_vw, i_t_delta_vw};
                    
                    % store relevant characteristics
                    m_fss(nscenarios, ngenonline, nWGgroupsonline, ndelta_vw, nt_delta_vw)      = ...
                        c_w_wg{igenscenario, igenonline, WGgroupsonline, i_delta_vw, i_t_delta_vw}(end);
                    m_fss(nscenarios, ngenonline, nWGgroupsonline, ndelta_vw, nt_delta_vw)      = ...
                        min(c_w_wg{igenscenario, igenonline, WGgroupsonline, i_delta_vw, i_t_delta_vw});
                    m_pufls(nscenarios, ngenonline, nWGgroupsonline, ndelta_vw, nt_delta_vw)    = ...
                        c_pufls_wg{igenscenario, igenonline, WGgroupsonline, i_delta_vw, i_t_delta_vw}(end);

                    i_t_delta_vw = i_t_delta_vw + 1;
                end
                i_delta_vw = i_delta_vw + 1;
            end
        end
    end
end

disp('Simulation stops.');

% close_system(powersystemdl,0);

%% ------------------------------------------------------------------------
% Display frequency variations for different scenarios
% -------------------------------------------------------------------------

%     close all;

v_colours   = ["#EDB120" "#7E2F8E" "#77AC30" "#4DBEEE" "#A2142F" "#AE43F0" "#0076A8" "#0072BD" "#D95319"];

hf = figure('WindowState','maximized');
subplot(5,1,1);

% Choose scenario here
igenscenario    = 1; % 1, 2, ... 24
igenonline      = 3; % bus number being disconnected
% WGgroupsonline  = 2; % 1, 2, 3 WGs
i_delta_vw      = 2; % 0, 0.5, 1 m/s
i_t_delta_vw    = 1; % 2s before, 0s, 2s after

for WGgroupsonline = 1:3
    plot(c_t_wg{igenscenario, igenonline, WGgroupsonline, i_delta_vw, i_t_delta_vw}, ...
        fbase+c_w_wg{igenscenario, igenonline, WGgroupsonline, i_delta_vw, i_t_delta_vw}*fbase, ...
        'Color',v_colours(WGgroupsonline));hold on;
end
% title('Frequency');
legend('3 WGs', '6 WGs', '9 WGs');
% xlabel('Time (s)')
ylabel('Freq \omega (Hz)') % ylabel('Frequency deviation \Delta\omega (Hz)')
hold off;

subplot(5, 1, 2);

for WGgroupsonline = 1:3
    plot(c_t_wg{igenscenario, igenonline, WGgroupsonline, i_delta_vw, i_t_delta_vw}, ...
        c_pufls_wg{igenscenario, igenonline, WGgroupsonline, i_delta_vw, i_t_delta_vw}, ...
        'Color',v_colours(WGgroupsonline));hold on;
end
% title('Power shedded by UFLS');
% legend('Zero WG', '3 WG', '6 WGs', '9 WGs');
% xlabel('Time (s)')
ylabel('P_{shedded}^{UFLS} (MW)')
hold off;

subplot(5, 1, 3);

for WGgroupsonline = 1:3
    plot(c_t_wg{igenscenario, igenonline, WGgroupsonline, i_delta_vw, i_t_delta_vw}, ...
        c_WGpenetration_wg{igenscenario, igenonline, WGgroupsonline, i_delta_vw, i_t_delta_vw}, ...
        'Color',v_colours(WGgroupsonline));hold on;
end
% title('WG penetration');
% legend('Zero WG', '3 WGs', '6 WGs', '9 WGs');
% xlabel('Time (s)')
ylabel('WG pen. (%)')
hold off;

subplot(5, 1, 4);

for WGgroupsonline = 1:3
    plot(c_t_wg{igenscenario, igenonline, WGgroupsonline, i_delta_vw, i_t_delta_vw}, ...
        c_pgenWGtot_wg{igenscenario, igenonline, WGgroupsonline, i_delta_vw, i_t_delta_vw}, ...
        'Color',v_colours(WGgroupsonline));hold on;
end
% title('Total Power generated by WGs');
% legend('Zero WG', '3 WGs', '6 WGs', '9 WGs');
% xlabel('Time (s)')
ylabel('P_{gen}^{WG} (MW)')
hold off;

subplot(5, 1, 5);

for WGgroupsonline = 1:3
    plot(c_t_wg{igenscenario, igenonline, WGgroupsonline, i_delta_vw, i_t_delta_vw}, ...
        c_pgentot_wg{igenscenario, igenonline, WGgroupsonline, i_delta_vw, i_t_delta_vw}, ...
        'Color',v_colours(WGgroupsonline));hold on;
end
% title('Total Power generated');
% legend('Zero WG', '3 WGs', '6 WGs', '9 WGs');
xlabel('Time (s)')
ylabel('P_{gen}^{tot} (MW)')
hold off;

sgt = sgtitle(['Scenario ', num2str(igenscenario), ' with the number ', num2str(igenonline), ' Bus shut off'],'Color',"#0072BD", 'interpreter','latex');
sgt.FontSize = 18;


toc